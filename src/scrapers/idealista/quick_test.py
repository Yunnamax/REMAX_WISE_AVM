from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import sys
import os
import json
import time
import random
import requests
from datetime import datetime
from urllib.parse import urljoin

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))

class IdealistaScraperWithMapping:
    def __init__(self):
        self.load_configs()
        self.load_mapping()
        self.setup_selenium()     
    
    def setup_selenium(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium WebDriver"""
        chrome_options = Options()
    
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        chrome_options.add_argument('--headless=new')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
    
        # STEALTH –ù–ê–°–¢–†–û–ô–ö–ò (–¥–æ–±–∞–≤—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏!)
        chrome_options.add_argument('--disable-blink-features=AutomationControlled')
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_argument('--disable-extensions')
    
        # User-Agent
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    
        # –°–û–ó–î–ê–ï–ú –î–†–ê–ô–í–ï–†
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
    
        # STEALTH –°–ö–†–ò–ü–¢ (–¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É!)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    def load_configs(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏"""
        with open('config/idealista/operations.json', 'r') as f:
            self.operations = json.load(f)
        with open('config/idealista/property_types.json', 'r') as f:
            self.property_types = json.load(f)
        with open('config/idealista/cities.json', 'r') as f:
            self.cities = json.load(f)
    
    def load_mapping(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        with open('config/idealista/url_mapping.json', 'r') as f:
            self.mapping = json.load(f)
    
    def build_url(self, operation, property_type, city):
        """–§–æ—Ä–º–∏—Ä—É–µ–º URL –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–ø–ø–∏–Ω–≥"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥
        op_pt = self.mapping['operations'][operation]
        prop_pt = self.mapping['property_types'][property_type]
        city_pt = self.mapping['cities'][city]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å city
        
        # –°–∫–ª–µ–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å –∫–∞–∫ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä
        url_path = f"{op_pt}-{prop_pt}"
        
        return f"https://www.idealista.pt/en/{url_path}/{city_pt}/"  # –£–±—Ä–∞–ª /en/ –¥–ª—è –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏
    
    def download_page(self, url, save_path):
        """Downloading one page using Selenium"""
        try:
            print(f"üåê –ó–∞–≥—Ä—É–∂–∞—é: {url}")
            self.driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(random.uniform(5, 8))
            
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            
            with open(save_path, 'w', encoding='utf-8') as f:
                f.write(self.driver.page_source)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(save_path)}")
            return True
            
        except Exception as e:
            print(f" Error: {url} - {e}")
            return False
    
    def run(self):
        """General lounch"""
        self.run_id = datetime.now().strftime("%Y-%m-%dT%H-%M-%S")
        self.run_path = f"data/bronze/idealista/run_{self.run_id}/"
        
        print(f"  Selenium scraper lounch: {self.run_path}")
        
        try:
            for operation in self.operations:
                for property_type in self.property_types:
                    for city in self.cities[:3]:  # –¢–æ–ª—å–∫–æ 3 –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
                        url = self.build_url(operation, property_type, city)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
                        filename = f"{self.run_path}/{operation}/{property_type}/{city}/page_1.html"
                        
                        print(f" {operation} + {property_type} + {city}")
                        print(f"   ‚Üí {url}")
                        
                        self.download_page(url, filename)
                        time.sleep(random.uniform(2, 4))  # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.driver.quit()
            print("üîö –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    scraper = IdealistaScraperWithMapping()
    scraper.run()